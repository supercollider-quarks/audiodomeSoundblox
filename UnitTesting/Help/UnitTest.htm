<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<title></title>
<meta name="Generator" content="Cocoa HTML Writer">
<meta name="CocoaVersion" content="824.44">
<style type="text/css">
p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 18.0px Helvetica}
p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; min-height: 12.0px}
p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Lucida Grande}
p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Lucida Grande; min-height: 15.0px}
p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; color: #001bb7}
p.p7 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco}
p.p8 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; color: #952e14}
p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.0px Monaco; color: #0000bf}
p.p10 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; color: #000000}
span.s1 {color: #000000}
span.s2 {color: #001bb7}
span.s3 {color: #606060}
span.Apple-tab-span {white-space:pre}
</style>
</head>
<body>
<p class="p1"><b>UnitTest</b></p>
<p class="p2"><br></p>
<p class="p2"><br></p>
<p class="p3">Standard unit test class</p>
<p class="p4"><br></p>
<p class="p5"><b>Writing Unit tests</b></p>
<p class="p2"><br></p>
<p class="p6">TestYourClass<span class="s1"> : </span>UnitTest<span class="s1"> {</span></p>
<p class="p2"><br></p>
<p class="p7"><span class="Apple-tab-span">	</span>setUp {</p>
<p class="p8"><span class="s1"><span class="Apple-tab-span">	</span><span class="Apple-tab-span">	</span></span>// this will be called before each test</p>
<p class="p7"><span class="Apple-tab-span">	</span>}</p>
<p class="p7"><span class="Apple-tab-span">	</span>tearDown {</p>
<p class="p8"><span class="s1"><span class="Apple-tab-span">	</span> <span class="Apple-tab-span">	</span></span>// this will be called after each test</p>
<p class="p7"><span class="Apple-tab-span">	</span>}</p>
<p class="p2"><span class="Apple-tab-span">	</span><span class="Apple-converted-space"> </span></p>
<p class="p7"><span class="Apple-tab-span">	</span>test_yourMethod {</p>
<p class="p8"><span class="s1"><span class="Apple-tab-span">	</span><span class="Apple-converted-space">  <span class="Apple-tab-span">	</span></span></span>// every method named test_</p>
<p class="p8"><span class="s1"><span class="Apple-tab-span">	</span><span class="Apple-converted-space">  <span class="Apple-tab-span">	</span></span></span>// will be run</p>
<p class="p2"><span class="Apple-tab-span">	</span> <span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span></p>
<p class="p7"><span class="Apple-tab-span">	</span><span class="Apple-converted-space">  <span class="Apple-tab-span">	</span></span><span class="s2">this</span>.assert( 6 == 6, <span class="s3">"6 should equal 6"</span>);</p>
<p class="p2"><span class="Apple-tab-span">	</span> <span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span></p>
<p class="p7"><span class="Apple-tab-span">	</span><span class="Apple-converted-space">  <span class="Apple-tab-span">	</span></span><span class="s2">this</span>.assertEquals( 9, 9 ,<span class="s3">"9 should equal 9"</span>);</p>
<p class="p2"><span class="Apple-tab-span">	</span> <span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span></p>
<p class="p7"><span class="Apple-tab-span">	</span><span class="Apple-converted-space">  <span class="Apple-tab-span">	</span></span><span class="s2">this</span>.assertFloatEquals( 4.0 , 1.0 * 4.0 / 4.0 * 4.0, <span class="s3">"floating point math should be close to equal"</span>);</p>
<p class="p2"><span class="Apple-tab-span">	</span><span class="Apple-converted-space"> </span></p>
<p class="p8"><span class="s1"><span class="Apple-tab-span">	</span><span class="Apple-converted-space">  <span class="Apple-tab-span">	</span></span></span>// we are inside a Routine, you may wait</p>
<p class="p7"><span class="Apple-tab-span">	</span><span class="Apple-converted-space">  <span class="Apple-tab-span">	</span></span>1.0.wait;</p>
<p class="p2"><span class="Apple-tab-span">	</span> <span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span></p>
<p class="p8"><span class="s1"><span class="Apple-tab-span">	</span><span class="Apple-converted-space">  <span class="Apple-tab-span">	</span></span></span>// this will wait until the server is booted</p>
<p class="p7"><span class="Apple-tab-span">	</span><span class="Apple-converted-space">  <span class="Apple-tab-span">	</span></span><span class="s2">this</span>.bootServer;</p>
<p class="p8"><span class="s1"><span class="Apple-tab-span">	</span><span class="Apple-converted-space">  <span class="Apple-tab-span">	</span></span></span>// if the server is already booted it will free all nodes</p>
<p class="p8"><span class="s1"><span class="Apple-tab-span">	</span><span class="Apple-converted-space">  <span class="Apple-tab-span">	</span></span></span>// and create new allocators, giving you a clean slate</p>
<p class="p2"><span class="Apple-tab-span">	</span> <span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span></p>
<p class="p7"><span class="Apple-tab-span">	</span><span class="Apple-converted-space">  <span class="Apple-tab-span">	</span></span>p = <span class="s2">Patch</span>({ <span class="s2">SinOsc</span>.ar });</p>
<p class="p7"><span class="Apple-tab-span">	</span><span class="Apple-converted-space">  <span class="Apple-tab-span">	</span></span>p.play;</p>
<p class="p2"><span class="Apple-tab-span">	</span> <span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span></p>
<p class="p8"><span class="s1"><span class="Apple-tab-span">	</span><span class="Apple-converted-space">  <span class="Apple-tab-span">	</span></span></span>// will wait until the condition is true</p>
<p class="p8"><span class="s1"><span class="Apple-tab-span">	</span><span class="Apple-converted-space">  <span class="Apple-tab-span">	</span></span></span>// will be considered a failure after 10 seconds</p>
<p class="p7"><span class="Apple-tab-span">	</span><span class="Apple-converted-space">  <span class="Apple-tab-span">	</span></span><span class="s2">this</span>.wait( { p.isPlaying },<span class="s3">"waiting for patch to play"</span>,10);</p>
<p class="p2"><span class="Apple-tab-span">	</span> <span class="Apple-converted-space"> <span class="Apple-tab-span">	</span></span></p>
<p class="p7"><span class="Apple-tab-span">	</span>}</p>
<p class="p2"><span class="Apple-tab-span">	</span></p>
<p class="p7">}</p>
<p class="p2"><br></p>
<p class="p2"><br></p>
<p class="p9">UnitTest<span class="s1">.runAll</span></p>
<p class="p2"><br></p>
<p class="p10">runs all subclasses of UnitTest</p>
<p class="p2"><br></p>
<p class="p9">YourClass<span class="s1">.test</span></p>
<p class="p2"><br></p>
<p class="p10">runs the test class for YourClass, which is assumed to be named TestYourClass.</p>
<p class="p10">If no test class if found it politely declines.</p>
<p class="p2"><br></p>
<p class="p2"><br></p>
<p class="p3">UnitTests for Common library classes are kept in the CommonTests quark.</p>
<p class="p3">This enables you to easily install and uninstall these tests.</p>
<p class="p4"><br></p>
<p class="p2"><br></p>
<p class="p2"><br></p>
<p class="p7">note: for the moment gui tests from within UnitTest.runAll will get an error:</p>
<p class="p7">ERROR: Primitive '_SCView_New' failed.</p>
<p class="p7">operation cannot be called from this Process.</p>
<p class="p2"><br></p>
<p class="p7">These same tests will work fine if you test the class individually: FlowView.test</p>
<p class="p7">A solution is pending.</p>
<p class="p2"><br></p>
<p class="p2"><br></p>
<p class="p2"><br></p>
<p class="p2"><br></p>
<p class="p7">see also MixedBundleTester, a MixedBundle that saves all of its bundles so that your tests can query what got sent to the Server.</p>
<p class="p2"><br></p>
</body>
</html>
