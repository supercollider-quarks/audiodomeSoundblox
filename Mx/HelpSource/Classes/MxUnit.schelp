CLASS:: MxUnit
summary:: Container for a musical object (Instr, NDef, Spline etc); this is a single unit that has inlets and outlets which can be connected to other units
categories:: Mx
related:: Classes/MxUnitApp


DESCRIPTION:: Container for a musical object (Instr, NDef, Spline etc); this is a single unit that has inlets and outlets which can be connected to other units

CLASSMETHODS::

METHOD:: protoHandler

returns::




METHOD:: make


argument:: source


argument:: class

returns::




METHOD:: loadData


argument:: data

returns::




METHOD:: new

argument:: source


argument:: inlets


argument:: outlets

returns::




METHOD:: handlersFor


argument:: class

returns::




METHOD:: handlersForClass


argument:: class

returns::




METHOD:: register


argument:: classname


argument:: handlers

returns::




METHOD:: initClass

returns::





INSTANCEMETHODS::

METHOD:: source

returns::




METHOD:: inlets

returns::




METHOD:: outlets

returns::




METHOD:: handlers

returns::




METHOD:: varPooling
This is of interest if you are adding live coding documents.  Each unit has an environment that is active when your document is active.  If varPooling is turned on then the parent of the units environment is the environment of the first upstream unit that also has varPooling turned on.  That in turn may get variables from further upstream units.

So Units with varPooling on share environment variable space, but this variable space flows down the graph (channels, units).   You may however explicitly find an upstream unit and set its values or use its environment.

argument:: boo

returns::




METHOD:: onLoad

returns::




METHOD:: group

returns::




METHOD:: saveData

returns::




METHOD:: init

returns::




METHOD:: getInlet


argument:: index

returns::




METHOD:: getOutlet


argument:: index

returns::




METHOD:: mx


argument:: mx

returns::




METHOD:: parentEnvir


argument:: env

returns::




METHOD:: isPrepared

returns::




METHOD:: prSetStatus


argument:: newStatus

returns::




METHOD:: didLoad

returns::




METHOD:: prepareToBundle


argument:: agroup


argument:: bundle
MixedBundle

argument:: private


argument:: bus

returns::




METHOD:: spawnToBundle


argument:: bundle
MixedBundle

returns::


METHOD:: stopToBundle


argument:: bundle
MixedBundle

returns::


METHOD:: freeToBundle


argument:: bundle
MixedBundle

returns::


METHOD:: respawnToBundle


argument:: bundle
MixedBundle

returns::


METHOD:: moveToHead


argument:: aGroup


argument:: bundle
MixedBundle

returns::


METHOD:: use


argument:: function


argument:: rollback

returns::




METHOD:: delegate


argument:: handlerName


argument::  ... args

returns::




METHOD:: callHandler


argument:: method


argument::  ... args

returns::




METHOD:: play


argument:: group


argument:: atTime


argument:: bus

returns::




METHOD:: stop


argument:: atTime


argument:: andFreeResources

returns::




METHOD:: respawn


argument:: atTime

returns::




METHOD:: isPlaying

returns::




METHOD:: numChannels

returns::




METHOD:: spec

returns::




METHOD:: beatDuration

returns::




METHOD:: copySource

returns::




METHOD:: name

returns::




METHOD:: gui


argument:: parent


argument:: bounds

returns::




METHOD:: draw


argument:: pen


argument:: bounds


argument:: style

returns::




METHOD:: timeGui


argument:: parent


argument:: bounds


argument:: maxTime

returns::




METHOD:: zoomTime


argument:: fromTime


argument:: toTime

returns::




METHOD:: gotoBeat


argument:: beat


argument:: atBeat


argument:: bundle
MixedBundle

returns::


METHOD:: canRecord

returns::




METHOD:: record


argument:: boo


argument:: atTime

returns::






