{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf290
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red96\green96\blue96;\red0\green115\blue0;
\red191\green0\blue0;}
\deftab560
\pard\pardeftab560\ql\qnatural

\f0\fs18 \cf0 (\
\cf2 Server\cf0 .default = s = \cf2 Server\cf0 .internal;\
s.boot;\
\
q = ();\
\
q.directory = \cf3 "/localvol/sound/share/audiosamples/koelnKalk"\cf0 ;\
q.subDirs = [\cf4 \\footsteps\cf0 , \cf4 \\doorClose\cf0 , \cf4 \\doorOpen\cf0 ];\
\
\
q.subDirs = (footsteps: 6, doorClose: 4, doorOpen: 4);\
)\
\
\
\
(\
q.buffers = q.subDirs.collect\{\cf2 |num, dirName|\cf0 \
	num.collect\{\cf2 |i|\cf0 \
		\cf2 Buffer\cf0 .readChannel(s, \cf3 "%/%/%.aiff"\cf0 .format(q.directory, dirName, i+1), channels: [0], action:\{|b| \cf3 "file %/%.aiff read.\\n"\cf0 .postf(dirName, i+1);  b.normalize\});\
	\}\
\};\
)\
\
q.channels = (0..5);\
\
(\
\cf2 SynthDef\cf0 (\cf4 \\wanderer\cf0 , \{\cf2 arg\cf0  \
		stepBufnum = 0, openBufnum, closeBufnum,\
		startChan = 0, finishChan = 1, dur = 5, rate=1, inter=4;\
	\cf2 var\cf0  steps, pannedSteps, open, close;\
	\cf2 var\cf0  openLength, closeLength, minDur;\
	\
	\
	\
	openLength = \cf2 BufSampleRate\cf0 .kr(openBufnum).reciprocal * \cf2 BufFrames\cf0 .ir(openBufnum);\
	closeLength = \cf2 BufSampleRate\cf0 .kr(closeBufnum).reciprocal * \cf2 BufFrames\cf0 .ir(closeBufnum);\
\
	\cf5 // minimal operation time (open and close doors)\cf0 \
	minDur = openLength + closeLength + dur;\
	//minDur.poll;\
	open = \cf2 BufRd\cf0 .ar(\
		1,\
		openBufnum, \
		\cf2 EnvGen\cf0 .ar(\cf2 Env\cf0 ([0, \cf2 BufFrames\cf0 .ir(openBufnum), 0], [openLength, 0]), gate: \cf2 Impulse\cf0 .ar(0)), \
		0, \cf5 // no loop \cf0 \
		inter\
	);\
	\
	steps = \cf2 BufRd\cf0 .ar(\
		1,\
		stepBufnum, \
		\cf2 EnvGen\cf0 .ar(\cf2 Env\cf0 ([0, 0, \cf2 BufFrames\cf0 .ir(stepBufnum), 0], [openLength * 0.9, \cf2 BufSampleRate\cf0 .kr(stepBufnum).reciprocal * \cf2 BufFrames\cf0 .ir(stepBufnum), 0]), gate: \cf2 Impulse\cf0 .ar(0)), \
		0, \cf5 // no loop \cf0 \
		inter\
	) * \cf2 EnvGen\cf0 .ar(\cf2 Env\cf0 .linen(0, minDur - closeLength, 0));\
	\
	pannedSteps = \cf2 Pan2\cf0 .ar(steps, \
		\cf2 EnvGen\cf0 .ar(\cf2 Env\cf0 ([-1, -1, 1], [openLength * 0.9, minDur - closeLength]))\
	);\
\
\
	close = \cf2 BufRd\cf0 .ar(\
		1,\
		closeBufnum, \
		\cf2 EnvGen\cf0 .ar(\cf2 Env\cf0 ([0, 0, \cf2 BufFrames\cf0 .ir(closeBufnum), 0], [minDur - closeLength, closeLength, 0]), gate: \cf2 Impulse\cf0 .ar(0), doneAction: 2), \
		0, \cf5 // no loop \cf0 \
		inter\
	);\
\
	\cf2 Out\cf0 .ar(startChan, open + pannedSteps[0]);\
	\cf2 Out\cf0 .ar(finishChan, close + pannedSteps[1]);\
	\
\}).memStore;\
)\
\
(\
\cf2 Synth\cf0 .grain(\cf4 \\wanderer\cf0 , [\
	\cf4 \\openBufnum\cf0 , q.buffers[\cf4 \\doorOpen\cf0 ].choose.bufnum, \
	\cf4 \\closeBufnum\cf0 , q.buffers[\cf4 \\doorClose\cf0 ].choose.bufnum, \
	\cf4 \\stepBufnum\cf0 , q.buffers[\cf4 \\footsteps\cf0 ].choose.bufnum, \
	\cf4 \\dur\cf0 , 10\
])\
)}