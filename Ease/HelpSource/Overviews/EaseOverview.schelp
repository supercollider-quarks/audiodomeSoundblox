TITLE:: EaseOverview
SUMMARY:: easing equations for sclang and scserver
CATEGORIES:: Ease

Easing and tweening classes for scserver and sclang. Ported from the Cinder C++ framework - original equations by Robert Penner.

NOTE::
All these take an input 0-1 as first argument. If you give it other values the behaviour is undefined.
::

see link::Classes/EaseGallery:: helpfile for a graphical overview.
see below for examples.

SECTION:: None
TABLE::
## link::Classes/EaseNone::(t) || easing equation for a simple linear tweening with no easing
::

SECTION:: Quadratic
TABLE::
## link::Classes/EaseInQuad::(t) || easing equation for a quadratic (t^2) ease-in, accelerating from zero velocity
## link::Classes/EaseOutQuad::(t) || easing equation for a quadratic (t^2) ease-out, decelerating to zero velocity
## link::Classes/EaseInOutQuad::(t) || easing equation for a quadratic (t^2) ease-in/out, accelerating until halfway, then decelerating
## link::Classes/EaseOutInQuad::(t) || easing equation for a quadratic (t^2) ease-out/in, decelerating until halfway, then accelerating
::

SECTION:: Cubic
TABLE::
## link::Classes/EaseInCubic::(t) || easing equation function for a cubic (t^3) ease-in, accelerating from zero velocity
## link::Classes/EaseOutCubic::(t) || easing equation for a cubic (t^3) ease-out, decelerating to zero velocity
## link::Classes/EaseInOutCubic::(t) || easing equation for a cubic (t^3) ease-in/out, accelerating until halfway, then decelerating
## link::Classes/EaseOutInCubic::(t) || easing equation for a cubic (t^3) ease-out/in, decelerating until halfway, then accelerating
::

SECTION:: Quartic
TABLE::
## link::Classes/EaseInQuart::(t) || easing equation for a quartic (t^4) ease-in, accelerating from zero velocity
## link::Classes/EaseOutQuart::(t) || easing equation for a quartic (t^4) ease-out, decelerating to zero velocity
## link::Classes/EaseInOutQuart::(t) || easing equation for a quartic (t^4) ease-in/out, accelerating until halfway, then decelerating
## link::Classes/EaseOutInQuart::(t) || easing equation for a quartic (t^4) ease-out/in, decelerating until halfway, then accelerating
::

SECTION:: Quintic
TABLE::
## link::Classes/EaseInQuint::(t) || easing equation function for a quintic (t^5) ease-in, accelerating from zero velocity
## link::Classes/EaseOutQuint::(t) || easing equation for a quintic (t^5) ease-out, decelerating to zero velocity
## link::Classes/EaseInOutQuint::(t) || easing equation for a quintic (t^5) ease-in/out, accelerating until halfway, then decelerating
## link::Classes/EaseOutInQuint::(t) || easing equation for a quintic (t^5) ease-out/in, decelerating until halfway, then accelerating
::

SECTION:: Sine
TABLE::
## link::Classes/EaseInSine::(t) || easing equation for a sinusoidal (sin(t)) ease-in, accelerating from zero velocity
## link::Classes/EaseOutSine::(t) || easing equation for a sinusoidal (sin(t)) ease-out, decelerating from zero velocity
## link::Classes/EaseInOutSine::(t) || easing equation for a sinusoidal (sin(t)) ease-in/out, accelerating until halfway, then decelerating
## link::Classes/EaseOutInSine::(t) || easing equation for a sinusoidal (sin(t)) ease-out/in, decelerating until halfway, then accelerating
::

SECTION:: Exponential
TABLE::
## link::Classes/EaseInExpo::(t) || easing equation for an exponential (2^t) ease-in, accelerating from zero velocity
## link::Classes/EaseOutExpo::(t) || easing equation for an exponential (2^t) ease-out, decelerating from zero velocity
## link::Classes/EaseInOutExpo::(t) || easing equation for an exponential (2^t) ease-in/out, accelerating until halfway, then decelerating
## link::Classes/EaseOutInExpo::(t) || easing equation for an exponential (2^t) ease-out/in, decelerating until halfway, then accelerating
::

SECTION:: Circular
TABLE::
## link::Classes/EaseInCirc::(t) || easing equation for a circular (sqrt(1-t^2)) ease-in, accelerating from zero velocity
## link::Classes/EaseOutCirc::(t) || easing equation for a circular (sqrt(1-t^2)) ease-out, decelerating from zero velocity
## link::Classes/EaseInOutCirc::(t) || easing equation for a circular (sqrt(1-t^2)) ease-in/out, accelerating until halfway, then decelerating
## link::Classes/EaseOutInCirc::(t) || easing equation for a circular (sqrt(1-t^2)) ease-out/in, decelerating until halfway, then accelerating
::

SECTION:: Bounce
TABLE::
## link::Classes/EaseInBounce::(t, a) || easing equation for a bounce (exponentially decaying parabolic bounce) ease-in, accelerating from zero velocity. the \a parameter controls overshoot, the default producing a 10% overshoot
## link::Classes/EaseOutBounce::(t, a) || easing equation for a bounce (exponentially decaying parabolic bounce) ease-out, decelerating from zero velocity. the \a parameter controls overshoot, the default producing a 10% overshoot
## link::Classes/EaseInOutBounce::(t, a) || easing equation for a bounce (exponentially decaying parabolic bounce) ease-in/out, accelerating until halfway, then decelerating. the \a parameter controls overshoot, the default producing a 10% overshoot
## link::Classes/EaseOutInBounce::(t, a) || easing equation for a bounce (exponentially decaying parabolic bounce) ease-out/in, decelerating until halfway, then accelerating. the \a parameter controls overshoot, the default producing a 10% overshoot
::

SECTION:: Back
TABLE::
## link::Classes/EaseInBack::(t, a) || easing equation for a back (overshooting cubic easing: (a+1)*t^3 - a*t^2) ease-in, accelerating from zero velocity. the \a parameter controls overshoot, the default producing a 10% overshoot
## link::Classes/EaseOutBack::(t, a) || easing equation for a back (overshooting cubic easing: (a+1)*t^3 - a*t^2) ease-out, decelerating from zero velocity. the \a parameter controls overshoot, the default producing a 10% overshoot
## link::Classes/EaseInOutBack::(t, a) || easing equation for a back (overshooting cubic easing: (a+1)*t^3 - a*t^2) ease-in/out, accelerating until halfway, then decelerating. the \a parameter controls overshoot, the default producing a 10% overshoot
## link::Classes/EaseOutInBack::(t, a) || easing equation for a back (overshooting cubic easing: (a+1)*t^3 - a*t^2) ease-out/in, decelerating until halfway, then accelerating. the \a parameter controls overshoot, the default producing a 10% overshoot
::

SECTION:: Elastic
TABLE::
## link::Classes/EaseInElastic::(t, a, p) || easing equation for an elastic (exponentially decaying sine wave) ease-in, accelerating from zero velocity
## link::Classes/EaseOutElastic::(t, a, p) || easing equation for an elastic (exponentially decaying sine wave) ease-out, decelerating from zero velocity
## link::Classes/EaseInOutElastic::(t, a, p) || easing equation for an elastic (exponentially decaying sine wave) ease-in/out, accelerating until halfway, then decelerating
## link::Classes/EaseOutInElastic::(t, a, p) || easing equation for an elastic (exponentially decaying sine wave) ease-out/in, decelerating until halfway, then accelerating
::

SECTION:: Atan
TABLE::
## link::Classes/EaseInAtan::(t, a) || easing equation for an atan ease-in, accelerating from zero velocity
## link::Classes/EaseOutAtan::(t, a) || easing equation for an atan ease-out, decelerating from zero velocity
## link::Classes/EaseInOutAtan::(t, a) || easing equation for an atan ease-in/out, accelerating until halfway, then decelerating
::

EXAMPLES::

CODE::
//--ramping
a= (0..100)/100;	//an array with 100 values 0.0-1.0
a.collect{|t| EaseInQuad(t)}.plot;
a.collect{|t| EaseOutQuad(t)}.plot;
a.collect{|t| EaseInOutQuad(t)}.plot;


//--similar in sclang and inside synthdefs
s.boot
{SinOsc.ar(EaseInOutExpo.kr(MouseX.kr)*500+500, 0, 0.1)}.play
a.collect{|x| EaseInOutExpo(x)}.plot


//--rates are flexibe when used inside synthdefs
{SinOsc.ar(EaseInAtan(SinOsc.kr(1)).linlin(0, 1, 500, 5000), 0, 0.1)}.play		//becomes kr
{SinOsc.ar(EaseInAtan.kr(SinOsc.ar(1)).linlin(0, 1, 500, 5000), 0, 0.1)}.play	//kr with ar arg
{SinOsc.ar(EaseInAtan.ar(SinOsc.kr(1)).linlin(0, 1, 500, 5000), 0, 0.1)}.play	//ar with kr arg


//--nesting
a= (0..100)/100;	//an array with 100 values 0.0-1.0
a.collect{|t| EaseInAtan(EaseInAtan(t))}.plot






a= {SinOsc.ar(EaseInOutQuint.ar(LFSaw.ar(MouseX.kr(1, 9, 1)).range(0, 1)).linexp(0, 1, 400, 800), 0, 0.1)}.play
a.free
a= {SinOsc.ar(EaseOutInExpo.ar(LFSaw.ar(MouseX.kr(1, 9, 1)).range(0, 1)).linexp(0, 1, 400, 800), 0, 0.1)}.play
a.free
a= {SinOsc.ar(EaseInAtan.ar(LFSaw.ar(MouseX.kr(1, 9, 1)).range(0, 1)).linexp(0, 1, 400, 800), 0, 0.1)}.play
a.free
a= {SinOsc.ar(EaseOutInElastic.ar(LFSaw.ar(MouseX.kr(1, 9, 1)).range(0, 1), MouseY.kr(1, 9, 1)).linexp(0, 1, 400, 800), 0, 0.1)}.play
a.free
a= {SinOsc.ar(EaseInBounce.ar(LFSaw.ar(MouseX.kr(1, 9, 1)).range(0, 1), MouseY.kr(1, 9, 1)).linexp(0, 1, 400, 800), 0, 0.1)}.play
a.free
::
