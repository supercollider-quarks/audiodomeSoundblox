{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf410
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red179\green179\blue255;\red191\green0\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf2 RedObject
\fs24 \cf0 			fundamental object in the \cf2 RedUniverse\cf0  toolkit
\f1\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs36 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \
base for all other object like [\cf2 \ul \ulc3 RedPendulum\cf0 \ulnone ], \cf2 RedParticle\cf0 , \cf2 RedBoid\cf0  etc.  implements simplified physical laws.  all objects register themselves in the world when created.\
\
see also [\cf2 \ul \ulc3 RedWorld\cf0 \ulnone ], [\cf2 \ul \ulc3 RedUniverse\cf0 \ulnone ]\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 \ul class methods:
\f0\b \ulnone \
	*new(world, location, velocity, acceleration, mass, size)
\f1\b0 \
		create a new object.  see class source for defaults.\
\
\ul instance methods:\ulnone \
	
\f0\b update
\f1\b0 \
		moves the object by updating the loc, vel and accel instance variables.\
	
\f0\b addForce(force)
\f1\b0 \
		adds a force (\cf2 RedVector\cf0 ) to the accel variable to push the object somewhere.\
	
\f0\b gravityForce(redObj)
\f1\b0 \
		returns a scalar value representing the gravity force from another object within \cf2 this\cf0  world.\
	
\f0\b frictionForce(constant)
\f1\b0 \
		slows down velocity.  scalar\
	
\f0\b viscosityForce(constant)
\f1\b0 \
		slows down velocity.  scalar\
	
\f0\b contains(redObj)
\f1\b0 \
		returns \cf2 true\cf0  if two objects touch.  see size below\
	
\f0\b collide(redObj)
\f1\b0 \
		collision detection.  add acceleration vector to both objects if they touch.  returns boolean.\
	\
\ul instance variables:
\f0\b \ulnone \
	<>world
\f1\b0 \
		a world (\cf2 RedWorld\cf0  of any dimension) that currently holds \cf2 this\cf0  object.  the object will add itself.\
	
\f0\b <>loc
\f1\b0 \
		the current location (\cf2 RedVector\cf0  of any dimension) within the world.\
	
\f0\b <>vel
\f1\b0 \
		the current velocity (\cf2 RedVector\cf0  of any dimension) that the object has.\
	
\f0\b <>accel
\f1\b0 \
		a vector or scalar representing current acceleration.\
	
\f0\b <>mass
\f1\b0 \
		a scalar.  how hard it will be to move \cf2 this\cf0  object around.  used for gravity forces.\
	
\f0\b <>size
\f1\b0 \
		a scalar.  the distance from location to the outer border ie radius.  used for contains and rendering.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
\
a= \cf2 RedWorld\cf0 .new\
b= \cf2 RedObject\cf0 (a)\
\
a.objects\
b.dump\
\
\cf4 //see examples folder}