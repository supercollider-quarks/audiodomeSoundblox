{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf410
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf2 //if preferred freq match with the human +-100 then play sound and move towards target\cf0 \
\cf2 //sound: audio input, matching agent's sounds\cf0 \
\
(\
s.waitForBoot\{\
	\cf3 var\cf0  width= 640, height= 480, w, world, n= 20,\
		synths, buf, bus, human;\
	\
	\cf2 //--world\cf0 \
	\cf3 Routine\cf0 \{\
	w= \cf3 GUI\cf0 .redWindow.new(\cf4 "track test1"\cf0 , \cf3 Rect\cf0 (128, 64, width, height)).front;\
	world= \cf3 RedWorld3\cf0 (\cf3 RedVector2D\cf0 [width, height], damping:0.5); \cf2 //dim,grav,maxvel,damp\cf0 \
	\
	\cf2 //--synthesis\cf0 \
	\cf3 SynthDef\cf0 (\cf5 \\beating\cf0 , \{\cf3 |out= 0, freq= 400, beat= 1, lp= 800, amp= 0, pan= 0|\cf0 \
		\cf3 var\cf0  z;\
		z= \cf3 RLPF\cf0 .ar(\cf3 Mix\cf0 (\cf3 LFSaw\cf0 .ar(freq+[0, beat], 0, amp)), lp);\
		\cf3 Out\cf0 .ar(out, \cf3 Pan2\cf0 .ar(z, pan));\
	\}).send(s);\
	buf= \cf3 Buffer\cf0 .alloc(s, 2048, 1);\
	\cf3 SynthDef\cf0 (\cf5 \\human\cf0 , \{\cf3 |out, bufnum|\cf0  \cf3 Out\cf0 .kr(out, \cf3 RedTrack\cf0 .kr(\cf3 AudioIn\cf0 .ar, bufnum))\}).send(s);\
	1.wait;\
	\cf3 Synth\cf0 (\cf5 \\human\cf0 , [\cf5 \\out\cf0 , 10, \cf5 \\bufnum\cf0 , buf.bufnum]);	\cf2 //output 6 ch control data from tracker\cf0 \
	bus= \cf3 Bus\cf0 (\cf5 \\control\cf0 , 10, 6);						\cf2 //access control data at ch 10-15\cf0 \
	\
	\cf2 //--objects\cf0 \
	\{\cf3 |i|\cf0 \
		\cf3 var\cf0  loc= \cf3 RedVector2D\cf0 [width, height].rand;		\cf2 //initial xy location\cf0 \
		\cf3 var\cf0  mass= 2.rrand(20);\
		\cf3 var\cf0  a= \cf3 RedAgent\cf0 (world, loc, \cf3 RedVector2D\cf0 [0.001, 0.001].rand2, \cf3 nil\cf0 , mass, mass); \cf2 //world,loc,vel,acc,mass,size\cf0 \
		a.maxForce_(1);\
		a.wdistance_(2);\
		a.wchange_(0.9);\
		a.state_((\
			\cf5 \\synth\cf0 : \cf3 Synth\cf0 (\cf5 \\beating\cf0 ),\
			\cf5 \\prefFreq\cf0 : mass.linexp(2, 20, 2000, 200),	\cf2 //a favourite pitch depends on mass\cf0 \
			\cf5 \\target\cf0 : \cf3 nil\cf0 							\cf2 //location for that pitch if found\cf0 \
		));\
		a.sense_\{\
			\cf3 var\cf0  listen= human.state.freq;\
			if(listen>0 and:\{(a.state.prefFreq-listen).abs<100\}, \{\
				a.state.target= human.loc;\
				a.state[\cf5 \\synth\cf0 ].set(\
					\cf5 \\freq\cf0 , a.state.prefFreq,\
					\cf5 \\amp\cf0 , 1/n*(width-a.loc.distance(human.loc)/width).pow(2)\
				);\
			\}, \{\
				a.state[\cf5 \\synth\cf0 ].set(\cf5 \\amp\cf0 , 0);\
				a.state.target= \cf3 nil\cf0 ;\
				a.addForceWander2D;\
			\});\
		\};\
		a.act_\{\
			if(a.state.target.notNil, \{\
				a.addForceArrive(a.state.target);\
			\});\
		\}\
		\
	\}.dup(n);\
	human= \cf3 RedAgent\cf0 (world, \cf3 RedVector2D\cf0 [100, 100]);\
	human.state_((\
		\cf5 \\event\cf0 : 0,\
		\cf5 \\deltax\cf0 : 0,\
		\cf5 \\freq\cf0 : 0,\
		\cf5 \\amp\cf0 : 0,\
		\cf5 \\timbre\cf0 : 0,\
		\cf5 \\centroid\cf0 : 0\
	));\
	human.sense_\{									\cf2 //listen and update state\cf0 \
		bus.getn(6, \{\cf3 |arr|\cf0 \
			human.state.event= arr[0];\
			human.state.deltax= arr[1];\
			human.state.freq= arr[2];\
			human.state.amp= arr[3];\
			human.state.timbre= arr[4];\
			human.state.centroid= arr[5];\
		\})\
	\};\
	\
	\cf2 //--loop\cf0 \
	w.draw\{\
		world.objects.do\{\cf3 |o, i|\cf0 						\cf2 //iterate all objects in this world\cf0 \
			human.loc= w.mouse;\
			o.update;								\cf2 //object update\cf0 \
			world.contain(o);						\cf2 //keep within world borders\cf0 \
			\
			\cf2 //--render\cf0 \
			if(o.state.event.notNil, \{\
				\cf3 GUI\cf0 .pen.fillColor_(\cf3 Color\cf0 .blue(0.7, 0.5));\
			\}, \{\
				if(o.state.target.notNil, \{\
					\cf3 GUI\cf0 .pen.fillColor_(\cf3 Color\cf0 .yellow);\
				\}, \{\
					\cf3 GUI\cf0 .pen.fillColor_(\cf3 Color\cf0 .grey(0.7, 0.5));\
				\});\
			\});\
			\cf3 GUI\cf0 .pen.fillOval(\cf3 Rect\cf0 .aboutRedObject2D(o));\
		\};\
		\cf2 //human.state.freq.postln;\cf0 \
	\}.play;\
	\}.play(\cf3 AppClock\cf0 );\
\})\
}