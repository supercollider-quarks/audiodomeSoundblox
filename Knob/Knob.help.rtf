{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red0\green115\blue0;\red191\green0\blue0;\red0\green0\blue191;
\red96\green96\blue96;\red191\green0\blue0;\red0\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Knob	a gui control with round, horizontal or vertical action\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 Knob.new
\f2\b0 (parent, bounds)\

\f0\b value -
\f2\b0  set or get the control's value.\

\f0\b valueAction(newValue) -
\f2\b0  sets the knob's value and performs the 
\f0\b action
\f2\b0  function.\

\f0\b action(view, x, y, modifiers) -
\f2\b0  user defined action hook function.\

\f0\b mouseOverAction(view, x, y) -
\f2\b0  user defined action hook for mouse over event. 
\f0\b acceptsMouseOver
\f2\b0  must be set to 
\f0\b true
\f2\b0  in the parent window for the 
\f0\b mouseOverAction
\f2\b0  hook to to work.\

\f0\b color -
\f2\b0  array of colors: 
\f0\b [
\f2\b0 center 
\f0\b Color
\f2\b0 ,  value 
\f0\b Color
\f2\b0 , range 
\f0\b Color
\f2\b0 , dial 
\f0\b Color]
\f2\b0 .\

\f0\b canFocus_(bool) - 
\f2\b0 enables/disables focus gain for the control\

\f0\b mode -
\f2\b0  knob's tracking mode. can be \cf2 \\round\cf0 , \cf2 \\horiz\cf0  or \cf2 \\vert.\cf0  defaults to \cf2 \\round\cf0  \

\f0\b centered -
\f2\b0  
\f0\b bool
\f2\b0 . the knob's center scale, 0.5 is zero in the value scale. eg. as in a pan control. defaults to 
\f0\b false
\f2\b0 . 
\f0\b \
step -
\f2\b0  step in which the value is incremented/decremented while draging in \cf2 \\horiz\cf0  and \cf2 \\vert\cf0  modes. defaults to 0.01.\

\f0\b keystep -
\f2\b0  step in which the value is incremented/decremented with the keyboard. defaults to 0.01.\

\f0\b visible -
\f2\b0  boolean; set knob's visibility true/false.\

\f0\b enabled -
\f2\b0  boolean; enable/disable the knob.\

\f0\b refresh -
\f2\b0  redraws the knob.\

\f0\b canFocus -
\f2\b0  enable/disable the knob's capability to gain focus.\

\f0\b canReceiveDragHandler - 
\f2\b0 customize drag methods see example.
\f0\b \
receiveDragHandler - 
\f2\b0 customize drag methods see example.
\f1\fs18 \

\f0\b\fs24 beginDragAction - 
\f2\b0 customize drag methods see example.
\f1\fs18 \

\f2\fs24 \
Keys work like on 
\f0\b SCSlider
\f2\b0  when the Knob gains focus:\

\f0\b arrow up
\f2\b0 , 
\f0\b arrow right
\f2\b0  or 
\f0\b ]
\f2\b0  - increment value by keystep\

\f0\b arrow dn
\f2\b0 , 
\f0\b arrow left 
\f2\b0 or 
\f0\b [
\f2\b0  decrement value by keystep\

\f0\b x 
\f2\b0 - set value to 1.0\

\f0\b c
\f2\b0  - set value to 0.5\

\f0\b n
\f2\b0  - set value to 0.0\
\

\f0\b Behavior:
\f2\b0 \
The Knob's default tracking mode is \cf2 \\round\cf0 .\
Pressing the 
\f0\b Control
\f2\b0  key and drag places the knob temporarily into \cf2 \\vert\cf0  tracking mode.\
Pressing the 
\f0\b Option
\f2\b0  key and drag places the knob temporarily into \cf2 \\horiz\cf0  tracking mode.\
Pressing the 
\f0\b Command
\f2\b0  or 
\f0\b Apple
\f2\b0  key drags out the knob's value. like for other views.\
\
In \cf2 \\round\cf0  mode, draging farther from the knob's center increases the control's precision.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // examples\cf0 \
(\
\cf4 var\cf0  window, size = 32; \cf3 // try different sizes - from 15 to 200 or more!\cf0 \
window = \cf4 SCWindow\cf0 .new(\cf5 "Knob"\cf0 , \cf4 Rect\cf0 (300,300,270,100)).front;\
k = \cf4 Knob\cf0 .new(window, \cf4 Rect\cf0 (20, 10, size, size));\
k.action_(\{\cf4 |v,x,y,m|\cf0  [\cf5 "action func"\cf0 , v.value].postln; \});\
\cf3 //k.color[1] = Color.gray(alpha:0);\cf0 \
)\
k.value\
k.value = 0.25\
k.valueAction = 0.125\
\cf3 \
// modes\cf0 \
k.mode = \cf2 \\vert\cf0 ;\
k.mode = \cf2 \\horiz\cf0 ;\
k.mode = \cf2 \\round\cf0 ; \cf3 // default\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
k.visible\
k.visible = \cf4 false\cf0 \
k.visible = \cf4 true\
\cf0 k.enabled_(\cf4 false\cf0 )\
k.enabled_(\cf4 true\cf0 )\
k.canFocus = \cf4 false\cf0 \
k.canFocus = \cf4 true\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // centered mode - like in a pan or eq gain control etc.\cf0 \
(\
\cf4 var\cf0  window;\
window = \cf4 SCWindow\cf0 .new(\cf5 "Pan Knob"\cf0 , \cf4 Rect\cf0 (350,400,270,70)).front;\
k = \cf4 Knob\cf0 .new(window, \cf4 Rect\cf0 (20,10,36,36));\
k.action_(\{\cf4 |v,x,y,m|\cf0  \cf2 \\pan\cf0 .asSpec.map(v.value).postln; \})\
//	.mode_(\cf2 \\horiz)\cf0 \
	.centered_(\cf4 false\cf0 )\
	.value_(\cf2 \\pan\cf0 .asSpec.unmap(0)); \cf3 // 0.5\cf0 \
//k.color[1] = Color.gray(alpha:0);\
)\
\
k.centered\
k.centered = \cf4 true\cf0 \
k.centered = \cf4 false\cf0 \
\
k.refresh\
\
\cf3 // step\cf0 \
(\
\cf4 var\cf0  window, midispec;\
midispec = [0,127,\cf2 'linear'\cf0 ,1].asSpec;\
window = \cf4 SCWindow\cf0 .new(\cf5 "step knob"\cf0 , \cf4 Rect\cf0 (350,400,270,70)).front;\
k = \cf4 Knob\cf0 .new(window, \cf4 Rect\cf0 (20,10,32,32));\
k.action_(\{\cf4 |v,x,y,m|\cf0  midispec.map(v.value).postln; \})\
       .value_(midispec.unmap(0));\
)\
k.step = 10/127 \cf3 // step by 10\cf0 \
\
k.mode = \cf2 \\vert\cf0 ;\
k.mode = \cf2 \\horiz\cf0 ;\
k.mode = \cf2 \\round\cf0 ;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf6 // GUI Kit selection\cf7 \
(\
	f = \{\
		\cf8 var\cf7  size = 32;\
		w = \cf8 GUI\cf7 .window.new(\cf9 "GUI.knob Test"\cf7 , \cf8 Rect\cf7 (580,590,300,80));\
	\
		k = \cf8 GUI\cf7 .knob.new(w, \cf8 Rect\cf7 (20, 10, size, size));\
		k.action_(\{\cf8 |v|\cf7  v.value.postln; \});\
	\
		w.front;\
	\};\
)\
\
\cf8 GUI\cf7 .cocoa; \cf6 // select cocoa gui\cf7 \
f.value;\
\
\cf8 GUI\cf7 .swing; \cf6 // select swing gui\cf7 \
f.value;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // mouseOverAction\cf0 \
(\
\cf4 var\cf0  size = 28;\
w = \cf4 SCWindow\cf0 .new(\cf5 "Knobs"\cf0 , \cf4 Rect\cf0 (250,500,270,70));\
w.acceptsMouseOver=\cf4 true\cf0 ; \cf3 // true in parent window!\cf0 \
w.view.decorator = \cf4 FlowLayout\cf0 (w.view.bounds);\
h = \cf4 SCStaticText\cf0 (w, 150 @ 20);\
w.view.decorator.nextLine;\
k = \cf4 Array\cf0 (8);\
8.do(\{\cf4 |item, i|\cf0 \
	\cf4 var\cf0  knob;\
	knob = \cf4 Knob\cf0 .new(w, size @ size)\
	//	.canFocus_(\cf4 false\cf0 )\
		.action_(\{\cf4 |v,x,y,m|\cf0  h.string = \cf5 "val: "\cf0  ++ v.value.asString; \})\
		.mouseOverAction_(\{\cf4 |v,x,y|\cf0  h.string = \cf5 "val: "\cf0  ++ v.value.asString; \});\
	\
	knob.color[0] = [\cf4 Color\cf0 .blue(0.7, 0.4), \cf4 Color\cf0 .red(0.7, 0.7), \cf4 Color\cf0 .green(0.3, 0.6),\
		\cf4 Color\cf0 .black.alpha_(0.3)].choose;\
	k = k.add(knob);\
\});\
w.front\
)\
k[4].value\
\
\cf3 // drag and drop\cf0 \
(\
\cf4 var\cf0  w, txt, size = 36;\
w = \cf4 SCWindow\cf0 .new(\cf5 "knobs"\cf0 , \cf4 Rect\cf0 (400,400,250,100)).front;\
w.acceptsMouseOver=\cf4 true\cf0 ;\
w.view.decorator = \cf4 FlowLayout\cf0 (w.view.bounds).gap_(10 @ 10).margin_(10 @10);\
txt = \cf4 SCStaticText\cf0 (w, 200 @ 14);\
w.view.decorator.nextLine;\
\
k = \cf4 Knob\cf0 (w, size @ size);\
k.action = \{\cf4 arg\cf0  v,x,y;  v.value.postln; txt.string_(\cf5 "value: "\cf0  ++ v.value); \};\
k.mouseOverAction = \{\cf4 |v|\cf0  txt.string_(\cf5 "value: "\cf0  ++ v.value); \};\
\
j = \cf4 Knob\cf0 (w, size @ size);\
j.action = \{\cf4 arg\cf0  v,x,y;  j.value.postln; txt.string_(\cf5 "value: "\cf0  ++ v.value); \};\
j.mouseOverAction = \{ txt.string_(\cf5 "value: "\cf0  ++ j.value); \};\
\
n = \cf4 SCNumberBox\cf0 (w, 100 @ 20);\
\cf3 //n.setProperty(\\boxColor,Color.grey(alpha:0.0));\cf0 \
n.value = 0.0;\
)\
\
\cf3 // customize drag and drop methods\cf0 \
k.canReceiveDragHandler\
k.canReceiveDragHandler = \cf4 false\cf0 ; \cf3 // don't accept drops\cf0 \
\
k.canReceiveDragHandler = \{ \cf4 SCView\cf0 .currentDrag.isFloat \}; \cf3 // accept only if drag is float\cf0 \
\
k.receiveDragHandler = \{ (\cf5 "value droped in: "\cf0  ++ \cf4 SCView\cf0 .currentDrag).postln \}\
\
k.receiveDragHandler = \{ k.valueAction = \cf4 SCView\cf0 .currentDrag.clip(0.0, 1.0); \}\
\
k.beginDragAction = \{ (\cf5 "drag out -> "\cf0  ++ k.value).postln; \}\
\
k.beginDragAction = \{ k.value.asFloat; \}\
\
\
\
}